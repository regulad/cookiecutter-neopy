[tool.poetry]
name = "{{cookiecutter.project_name}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.description}}"
authors = ["{{cookiecutter.author}} <{{cookiecutter.email}}>"]
license = "{{cookiecutter.license}}"
readme = "README.md"
homepage = "https://github.com/{{cookiecutter.github_user}}/{{cookiecutter.project_name}}"
repository = "https://github.com/{{cookiecutter.github_user}}/{{cookiecutter.project_name}}"
documentation = "https://{{cookiecutter.project_name}}.readthedocs.io"
{% if cookiecutter.package_name != cookiecutter.project_name.replace('-', '_') -%}
packages = [
    { include = "{{cookiecutter.package_name}}", from = "src" },
]
{% endif -%}
classifiers = [
    "{{cookiecutter.development_status}}",
]

[tool.poetry.urls]
Changelog = "https://github.com/{{cookiecutter.github_user}}/{{cookiecutter.project_name}}/releases"

[tool.poetry.dependencies]
python = "^3.11.4,<3.13"  # 3.13 is planned to make sweeping changes
typer = {version = "^0.9.0", extras = ["all"]}
typing-extensions = "^4.7.1"
importlib-metadata = "^6.8.0"
uvicorn = {extras = ["standard"], version = "^0.23.2"}
fastapi = {extras = ["all"], version = "^0.103.0"}
rich = "^13.5.2"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.11"}
asyncpg = "^0.28.0"
dislog = {extras = ["discordpy"], version = "^3.0.0"}
sqlmodel = {git = "https://github.com/AntonDeMeester/sqlmodel.git", rev = "40bcdfe"}
#sqlmodel = "^0.0.8"  # WARNING: SQModel does not officially support pydantic 2 and sqlalchemy 2, so this fork is used
#strawberry-graphql = {extras = ["fastapi"], version = "^0.205.0"}  # GraphQL is not (currently) used in this project
pydantic = "^2.3.0"
httpx = "^0.24.1"
anyio = {extras = ["trio"], version = "^3.7.1"}
uvloop = {version = ">=0.17", markers = "python_version < \"3.12\" and platform_python_implementation == \"CPython\" and platform_system != \"Windows\""}
prometheus-client = "^0.17.1"
prometheus-fastapi-instrumentator = "^6.1.0"
aio-pika = "^9.2.2"
starlette = "^0.27"
psutil = "^5.9.5"
msgpack = "^1.0.5"
pytz = ">=2023.3"
alembic = {extras = ["tz"], version = ">=1.11.3,<1.12"}  # does not use semver
trio = "<0.22"  # odd version is thanks to anyio compatibility
orjson = "^3.9.5"
pg8000 = "^1.30.1"
redis = {extras = ["hiredis"], version = "^5.0.0"}

[tool.poetry.dev-dependencies]
Pygments = ">=2.10.0"
bandit = ">=1.7.4"
black = ">=21.10b0"
coverage = {extras = ["toml"], version = ">=6.2"}
darglint = ">=1.8.1"
flake8 = ">=4.0.1"
flake8-bugbear = ">=21.9.2"
flake8-docstrings = ">=1.6.0"
flake8-rst-docstrings = ">=0.2.5"
furo = ">=2021.11.12"
isort = ">=5.10.1"
mypy = ">=0.930"
pep8-naming = ">=0.12.1"
pre-commit = ">=2.16.0"
pre-commit-hooks = ">=4.1.0"
pytest = ">=6.2.5"
pyupgrade = ">=2.29.1"
safety = ">=1.10.3"
sphinx = ">=4.3.2"
sphinx-autobuild = ">=2021.3.14"
sphinx-click = ">=3.0.2"
typeguard = ">=2.13.3"
xdoctest = {extras = ["colors"], version = ">=0.15.10"}
myst-parser = {version = ">=0.16.1"}

[tool.poetry.scripts]
{{cookiecutter.project_name}} = "{{cookiecutter.package_name}}.__main__:main"

[tool.poetry.group.dev.dependencies]
pyinstaller = "^5.13.0"
types-pytz = ">=2023.3.0.1"
pytest = "^7.4.0"
pygments = "^2.16.1"
coverage = {extras = ["toml"], version = "^7.3.0"}
mypy = "^1.5.1"
sphinx = "^7.2.4"
sphinx-autobuild = ">=2021.3.14"
sphinx-click = "^5.0.1"
furo = ">=2023.8.19"
myst-parser = "^2.0.0"
nox = ">=2023.4.22"
nox-poetry = "^1.0.3"
pytest-asyncio = "^0.21.1"
pytest-mock = "^3.11.1"
pre-commit = "^3.3.3"
bandit = "^1.7.5"
black = "^23.7.0"
darglint = "^1.8.1"
flake8 = "^6.1.0"
flake8-bugbear = "^23.7.10"
flake8-docstrings = "^1.7.0"
flake8-rst-docstrings = "^0.3.0"
isort = "^5.12.0"
pep8-naming = "^0.13.3"
pre-commit-hooks = "^4.4.0"

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["{{cookiecutter.package_name}}", "tests"]

[tool.coverage.report]
show_missing = true
fail_under = 100
# https://coverage.readthedocs.io/en/stable/excluding.html
exclude_also = [
    "def __repr__",
    "if __debug__:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
omit = [
    "*/__main__.py",
]

[tool.black]
line-length = {{cookiecutter.line_length}}
target-version = ["py311"]

[tool.isort]
profile = "black"
force_single_line = true
lines_after_imports = 2

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true
ignore_missing_imports = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
